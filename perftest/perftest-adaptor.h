
/*
 * This file was automatically generated by sdbuscpp-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__perftest_adaptor_h__adaptor__H__
#define __sdbuscpp__perftest_adaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace sdbuscpp {

class perftest_adaptor
{
public:
    static constexpr const char* interfaceName = "org.sdbuscpp.perftest";

protected:
    perftest_adaptor(sdbus::IObject& object)
        : object_(object)
    {
        object_.registerMethod("sendDataSignals").onInterface(interfaceName).implementedAs([this](const uint32_t& numberOfSignals, const uint32_t& signalMsgSize){ return this->sendDataSignals(numberOfSignals, signalMsgSize); });
        object_.registerMethod("concatenateTwoStrings").onInterface(interfaceName).implementedAs([this](const std::string& string1, const std::string& string2){ return this->concatenateTwoStrings(string1, string2); });
        object_.registerSignal("dataSignal").onInterface(interfaceName).withParameters<std::string>();
    }

public:
    void dataSignal(const std::string& data)
    {
        object_.emitSignal("dataSignal").onInterface(interfaceName).withArguments(data);
    }

private:
    virtual void sendDataSignals(const uint32_t& numberOfSignals, const uint32_t& signalMsgSize) = 0;
    virtual std::string concatenateTwoStrings(const std::string& string1, const std::string& string2) = 0;

private:
    sdbus::IObject& object_;
};

}} // namespaces

#endif
